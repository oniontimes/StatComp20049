free = combs[i,]     # the indices of the free variables (those set to 0)
pivots = setdiff(indices, free)    # indices of the pivots (not free)
corner = rep(0,m+n)
corner[pivots] = solve(A[,pivots], b)
if (all(corner >= 0)) {
feasible = TRUE
break
}
}
if (!feasible) {
print('no feasible solution--go optimize something else!')
return(NULL)
}
# step 2: slide around the edges until the optimal corner is found
N <- A[,free]
B <- A[,pivots]
c_n <- cost[free]
c_b <- cost[pivots]
r <- c_n - (c_b %*% solve(B) %*% N)
while (any(r < 0)) {
# the total cost at this corner is greater than the cost of including one of
# the free variables instead of one of the pivots. the best two to swap are:
entering <- which.min(r)
B_inv <- solve(B)
u <- N[,entering]
z <- (B_inv %*% b)/(B_inv %*% u)
leaving <- which.min(z)
# swap entering and leaving
temp <- pivots[leaving]
pivots[leaving] <- free[entering]
free[entering] <- temp
N <- A[,free]
B <- A[,pivots]
c_n <- cost[free]
c_b <- cost[pivots]
r <- c_n - (c_b %*% solve(B) %*% N)
}
corner = rep(0,m+n)
corner[pivots] = solve(A[,pivots], b)
corner
}
A = rbind(
c(1,2,-1,0),
c(2,1,0,-1))
b = c(6,6)
cost = c(1,1,0,0)
x <- simplex(A, b, cost)
x
GD <- function(x, y, rate, threshold, max_iter) {
n=length(y)
m <- runif(1, 0, 1)
c <- runif(1, 0, 1)
yhat <- m * x + c
MSE <- sum((y - yhat) ^ 2) / n
converged = F
iterations = 0
while(converged == F) {
## Implement the gradient descent algorithm
m_new <- m - rate * ((1 / n) * (sum((yhat - y) * x)))
c_new <- c - rate * ((1 / n) * (sum(yhat - y)))
m <- m_new
c <- c_new
yhat <- m * x + c
MSE_new <- sum((y - yhat) ^ 2) / n
if(MSE - MSE_new <= threshold) {
abline(c, m)
converged = T
return(paste("Optimal intercept:", c, "Optimal slope:", m))
}
iterations = iterations + 1
if(iterations > max_iter) {
abline(c, m)
converged = T
return(paste("Optimal intercept:", c, "Optimal slope:", m))
}
}
}
attach(mtcars)
GD(disp, mpg, 0.0000293, 0.001, 2500000)
GD <- function(x, y, rate, threshold, max_iter) {
n=length(y)
m <- runif(1, 0, 1)
c <- runif(1, 0, 1)
yhat <- m * x + c
MSE <- sum((y - yhat) ^ 2) / n
converged = F
iterations = 0
while(converged == F) {
## Implement the gradient descent algorithm
m_new <- m - rate * ((1 / n) * (sum((yhat - y) * x)))
c_new <- c - rate * ((1 / n) * (sum(yhat - y)))
m <- m_new
c <- c_new
yhat <- m * x + c
MSE_new <- sum((y - yhat) ^ 2) / n
if(MSE - MSE_new <= threshold) {
converged = T
return(paste("Optimal intercept:", c, "Optimal slope:", m))
}
iterations = iterations + 1
if(iterations > max_iter) {
converged = T
return(paste("Optimal intercept:", c, "Optimal slope:", m))
}
}
}
attach(mtcars)
GD(disp, mpg, 0.0000293, 0.001, 2500000)
getwd()
usethis::use_vignette()
usethis::use_vignette()
usethis::use_vignette()
usethis::use_vignette("homework")
warnings()
usethis::use_vignette("homework")
warning()
usethis::use_vignette("StatCompR")
check()
devtools::check()
rm(list
= ls())
devtools::document()
library(roxygen2); # Read in the roxygen2 R package
roxygenise();
devtools::document()
devtools::document()
devtools::build()
devtools::build()
devtools::document()
library(StatComp20049)
library(StatComp)
library(StatComp20049)
remove.packages("StatComp20049")
devtools::build_vignettes()
getwd()
setwd("C:/Users/cheng/Documents/StatComp20049")
devtools::build_vignettes()
devtools::build_vignettes()
update.packages(repos = "https://mirrors.ustc.edu.cn/CRAN/",ask='graphics',checkBuilt=TRUE)
devtools::build_vignettes()
devtools::install_github("zhanghfd/statcomp", build_vignettes = TRUE,force=T)
remove.packages("StatComp")
devtools::install_github("zhanghfd/statcomp", build_vignettes = TRUE,force=T)
library(StatComp)
devtools::install_github("zhanghfd/statcomp", build_vignettes = TRUE,force=T)
devtools::build_vignettes()
library(StatComp20049)
remove.packages("StatComp20049")
devtools::build()
install.packages('../StatComp20049_1.0.tar.gz',repo=NULL)
library(StatComp20049)
remove.packages("StatComp20049")
library(StatComp20049)
browseVignettes(StatComp20049)
browseVignettes("StatComp20049")
library(StatComp20049)
remove.packages("StatComp20049")
library(StatComp20049)
remove.packages("StatCOmp20049")
remove.packages("StatComp20049")
devtools::build_vignettes()
devtools::build()
.Last.error.trace
?surceCpp
??sourceCpp
library(Rcpp)
library(microbenchmark)
# R
lap_f = function(x) exp(-abs(x))
rw.Metropolis = function(sigma, x0, N){
x = numeric(N)
x[1] = x0
u = runif(N)
k = 0
for (i in 2:N) {
y = rnorm(1, x[i-1], sigma)
if (u[i] <= (lap_f(y) / lap_f(x[i-1]))) x[i] = y
else {
x[i] = x[i-1]
k = k+1
}
}
return(list(x = x, k = k))
}
sourceCpp(code="#include <cmath>
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
NumericVector rwMetropolis (double sigma, double x0, int N) {
NumericVector x(N);
x[0] = x0;
NumericVector u = runif(N);
for (int i = 1; i < N;i++ ) {
NumericVector y = rnorm(1, x[i-1], sigma);
if (u[i] <= (f(y[0]) / f(x[i-1]))){
x[i] = y[0];
}
else {
x[i] = x[i-1];
}
}
return(x);
} ")
library(Rcpp)
library(microbenchmark)
# R
lap_f = function(x) exp(-abs(x))
rw.Metropolis = function(sigma, x0, N){
x = numeric(N)
x[1] = x0
u = runif(N)
k = 0
for (i in 2:N) {
y = rnorm(1, x[i-1], sigma)
if (u[i] <= (lap_f(y) / lap_f(x[i-1]))) x[i] = y
else {
x[i] = x[i-1]
k = k+1
}
}
return(list(x = x, k = k))
}
sourceCpp(code="#include <cmath>
#include <Rcpp.h>
using namespace Rcpp;
//[[Rcpp::export]]
double f(double x) {
return exp(-abs(x));
}
// [[Rcpp::export]]
NumericVector rwMetropolis (double sigma, double x0, int N) {
NumericVector x(N);
x[0] = x0;
NumericVector u = runif(N);
for (int i = 1; i < N;i++ ) {
NumericVector y = rnorm(1, x[i-1], sigma);
if (u[i] <= (f(y[0]) / f(x[i-1]))){
x[i] = y[0];
}
else {
x[i] = x[i-1];
}
}
return(x);
} ")
x0 = 25
N = 2000
sigma = 2
(time = microbenchmark(rwR=rw.Metropolis(sigma,x0,N),rwC=rwMetropolis(sigma,x0,N)))
time
library(Rcpp)
library(microbenchmark)
# R
lap_f = function(x) exp(-abs(x))
rw.Metropolis = function(sigma, x0, N){
x = numeric(N)
x[1] = x0
u = runif(N)
k = 0
for (i in 2:N) {
y = rnorm(1, x[i-1], sigma)
if (u[i] <= (lap_f(y) / lap_f(x[i-1]))) x[i] = y
else {
x[i] = x[i-1]
k = k+1
}
}
return(list(x = x, k = k))
}
sourceCpp(code="#include <cmath>
#include <Rcpp.h>
using namespace Rcpp;
//[[Rcpp::export]]
double f(double x) {
return exp(-abs(x));
}
// [[Rcpp::export]]
NumericVector rwMetropolis (double sigma, double x0, int N) {
NumericVector x(N);
x[0] = x0;
NumericVector u = runif(N);
for (int i = 1; i < N;i++ ) {
NumericVector y = rnorm(1, x[i-1], sigma);
if (u[i] <= (f(y[0]) / f(x[i-1]))){
x[i] = y[0];
}
else {
x[i] = x[i-1];
}
}
return(x);
} ")
x0 = 25
N = 2000
sigma = 2
(time = microbenchmark(rwR=rw.Metropolis(sigma,x0,N),rwC=rwMetropolis(sigma,x0,N)))
library(Rcpp)
library(microbenchmark)
# R
lap_f = function(x) exp(-abs(x))
rw.Metropolis = function(sigma, x0, N){
x = numeric(N)
x[1] = x0
u = runif(N)
k = 0
for (i in 2:N) {
y = rnorm(1, x[i-1], sigma)
if (u[i] <= (lap_f(y) / lap_f(x[i-1]))) x[i] = y
else {
x[i] = x[i-1]
k = k+1
}
}
return(list(x = x, k = k))
}
sourceCpp(code="#include <cmath>
#include <Rcpp.h>
using namespace Rcpp;
//[[Rcpp::export]]
double f(double x) {
return exp(-abs(x));
}
// [[Rcpp::export]]
NumericVector rwMetropolis (double sigma, double x0, int N) {
NumericVector x(N);
x[0] = x0;
NumericVector u = runif(N);
for (int i = 1; i < N;i++ ) {
NumericVector y = rnorm(1, x[i-1], sigma);
if (u[i] <= (f(y[0]) / f(x[i-1]))){
x[i] = y[0];
}
else {
x[i] = x[i-1];
}
}
return(x);
} ")
x0 = 25
N = 2000
sigma = 2
(time = microbenchmark(rwR=rw.Metropolis(sigma,x0,N),rwC=rwMetropolis(sigma,x0,N)))
devtools::document()
rm(list=ls())
devtools::document()
devtools::build()
devtools::build()
devtools::build()
install.packages('../StatComp20049_1.0.tar.gz',repo=NULL)
install.packages('../StatComp20049_1.0.tar.gz',repo=NULL)
install.packages("../StatComp20049_1.0.tar.gz",repo=NULL)
devtools::document()
devtools::check()
install.packages()
install.packages('roxygen2',dependencies = T)
install.packages("roxygen2", dependencies = T)
devtools::check()
devtools::build()
library(Rcpp)
library(microbenchmark)
# R
lap_f = function(x) exp(-abs(x))
rw.Metropolis = function(sigma, x0, N){
x = numeric(N)
x[1] = x0
u = runif(N)
k = 0
for (i in 2:N) {
y = rnorm(1, x[i-1], sigma)
if (u[i] <= (lap_f(y) / lap_f(x[i-1]))) x[i] = y
else {
x[i] = x[i-1]
k = k+1
}
}
return(list(x = x, k = k))
}
dir_cpp = '../vignettes/'
sourceCpp(paste0(dir_cpp,"rwMetropolis.cpp"))
x0 = 25
N = 2000
sigma = 2
(time = microbenchmark(rwR=rw.Metropolis(sigma,x0,N),rwC=rwMetropolis(sigma,x0,N)))
library(Rcpp)
library(microbenchmark)
# R
lap_f = function(x) exp(-abs(x))
rw.Metropolis = function(sigma, x0, N){
x = numeric(N)
x[1] = x0
u = runif(N)
k = 0
for (i in 2:N) {
y = rnorm(1, x[i-1], sigma)
if (u[i] <= (lap_f(y) / lap_f(x[i-1]))) x[i] = y
else {
x[i] = x[i-1]
k = k+1
}
}
return(list(x = x, k = k))
}
dir_cpp = '../vignettes/'
sourceCpp(paste0(dir_cpp,"rwMetropolis.cpp"))
x0 = 25
N = 2000
sigma = 2
(time = microbenchmark(rwR=rw.Metropolis(sigma,x0,N),rwC=rwMetropolis(sigma,x0,N)))
library(Rcpp)
library(microbenchmark)
# R
lap_f = function(x) exp(-abs(x))
rw.Metropolis = function(sigma, x0, N){
x = numeric(N)
x[1] = x0
u = runif(N)
k = 0
for (i in 2:N) {
y = rnorm(1, x[i-1], sigma)
if (u[i] <= (lap_f(y) / lap_f(x[i-1]))) x[i] = y
else {
x[i] = x[i-1]
k = k+1
}
}
return(list(x = x, k = k))
}
dir_cpp = '../vignettes/'
sourceCpp(paste0(dir_cpp,"rw.cpp"))
x0 = 25
N = 2000
sigma = 2
(time = microbenchmark(rwR=rw.Metropolis(sigma,x0,N),rwC=rwMetropolis(sigma,x0,N)))
library(Rcpp)
library(microbenchmark)
# R
lap_f = function(x) exp(-abs(x))
rw.Metropolis = function(sigma, x0, N){
x = numeric(N)
x[1] = x0
u = runif(N)
k = 0
for (i in 2:N) {
y = rnorm(1, x[i-1], sigma)
if (u[i] <= (lap_f(y) / lap_f(x[i-1]))) x[i] = y
else {
x[i] = x[i-1]
k = k+1
}
}
return(list(x = x, k = k))
}
dir_cpp = '../vignettes/'
sourceCpp(paste0(dir_cpp,"rw.cpp"))
x0 = 25
N = 2000
sigma = 2
(time = microbenchmark(rwR=rw.Metropolis(sigma,x0,N),rwC=rwMetropolis(sigma,x0,N)))
library(Rcpp)
library(microbenchmark)
# R
lap_f = function(x) exp(-abs(x))
rw.Metropolis = function(sigma, x0, N){
x = numeric(N)
x[1] = x0
u = runif(N)
k = 0
for (i in 2:N) {
y = rnorm(1, x[i-1], sigma)
if (u[i] <= (lap_f(y) / lap_f(x[i-1]))) x[i] = y
else {
x[i] = x[i-1]
k = k+1
}
}
return(list(x = x, k = k))
}
sourceCpp(code="#include <cmath>
#include <Rcpp.h>
using namespace Rcpp;
//[[Rcpp::export]]
double f(double x) {
return exp(-abs(x));
}
//[[Rcpp::export]]
NumericVector rwMetropolis (double sigma, double x0, int N) {
NumericVector x(N);
x[0] = x0;
NumericVector u = runif(N);
for (int i = 1; i < N;i++ ) {
NumericVector y = rnorm(1, x[i-1], sigma);
if (u[i] <= (f(y[0]) / f(x[i-1]))){
x[i] = y[0];
}
else {
x[i] = x[i-1];
}
}
return(x);
} ")
x0 = 25
N = 2000
sigma = 2
(time = microbenchmark(rwR=rw.Metropolis(sigma,x0,N),rwC=rwMetropolis(sigma,x0,N)))
devtools::document()
devtools::document()
devtools::build()
install.packages("StatComp20049_1.0.tar.gz",repo=NULL)
install.packages("StatComp20049_1.0.tar.gz")
install.packages("../StatComp20049_1.0.tar.gz",repo=NULL)
devtools::install_github("oniontims/StatComp20049")
file.exists("~/.ssh/id_rsa.pub")
